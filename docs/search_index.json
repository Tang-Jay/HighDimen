[["index.html", "高维数据 第 1 章 前言 1.1 致谢 1.2 \\(\\lambda\\)数值解", " 高维数据 唐洁，邹云龙 2022-10-08 第 1 章 前言 高维研究的R笔记。 Codes Bookdown Online 1.1 致谢 感谢谢益辉开发的bookdown和模板。 1.2 \\(\\lambda\\)数值解 #=============================================== # Chen et al 2008 #=============================================== lambdaChen&lt;-function(u){# u为p*n,p是X的维数，n是数据的个数 p=dim(u)[2] M=rep(0,p) k=0 gama=1 tol=1e-11 dif=1 R1=rep(0,p) R2=R1%*%t(R1) while(dif&gt;tol &amp;&amp; k&lt;=300){ # 计算R1、R2 aa=1+t(M)%*%t(u) for(i in 1:p){ R1[i]=sum(t(u[,i])/aa) for(j in 1:p){ R2[i,j]=-sum(u[,i]*u[,j]/aa^2) } } delta=-solve(R2)%*%R1 dif=c(sqrt(t(delta)%*%delta)) sigma=gama*delta while(min(1+t(M+sigma)%*%t(u))&lt;=0){ gama=gama/2 sigma=gama*delta } M=M+sigma gama=1/sqrt(k+1) k=k+1 } return(M) } # 检验 # lam = lambdaChen(z) # aa=1+t(lam)%*%t(z) # glam=rowSums(t(z)/matrix(aa,p,n,byrow = TRUE)) # print(max(abs(glam))) "],["section.html", "第 2 章 2020-09-27 2.1 移动模型 2.2 模拟结果 2.3 运行代码", " 第 2 章 2020-09-27 2.1 移动模型 复现2009ChenSX，P716-718分位数图。 2009ChenSX.pdf 代码下载 2.2 模拟结果 \\(\\{X_i\\}_{i=1}^n \\in \\mathbb{R}^p\\) 是独立同分布随机变量，来自下面的移动平均模型： \\[X_{ij}=Z_{ij}+\\rho Z_{ij+1} \\quad (i=1,\\cdots,n,\\ j=1,\\cdots,p)\\] 此处，对于任意\\(i\\)，\\(\\{Z_{ij}\\}_{j=1}^{p+1}\\)是独立随机变量，并且均值为0，方差相同。我们取标准正态误差。 \\(\\rho=0.5\\) \\(n = 200,400,800\\) \\(p=c_1n^{0.4}\\)，\\(c_1 = 3,4,5\\) \\(p=c_2n^{0.24}\\)，\\(c_2 = 4,6,8\\) 2.2.1 分位数图 2.3 运行代码 2.3.1 覆盖率 #=============================================== # High dimensional Data #=============================================== # rm(list = ls()) # source(&#39;GlambdaChen.R&#39;) #==================修改参数====================# nsim = 100 n = 800 size = c(42,55,72) rho = 0.5 a = 0.95 #==================开始模拟====================# cat(&#39;模型进行&#39;,nsim,&#39;次&#39;,&#39;\\n&#39;) cat(&#39;n &#39;,&#39;p &#39;,&#39; EL &#39;,&#39;MEL1 &#39;,&#39;MEL2 &#39;,&#39;\\n&#39;) for (p in size){ mu = rep(0,p) Sigma = diag(p) for(i in 1:p){ for(j in 1:p){ if(abs(i-j)==1){Sigma[i,j] = rho} } } f1 = 0 f2 = 0 f3 = 0 for(i in 1:nsim){ # 估计方程赋值 Z = matrix(rnorm(n*(p+1),0,1), p+1, n) Z1 = Z[-(p+1),] Z2 = Z[-1,] X = Z1 + rho*Z2 z = t(X) # 计算EL值 lam = lambdaChen(z) el = 2*sum( log(1+t(lam)%*%t(z)) ) mel = (el-p)/sqrt(2*p) if( el &lt;= qchisq(a,p) ) f1=f1+1 if( mel &lt;= qnorm(a,0,1)) f2=f2+1 if( abs(mel) &lt;= qnorm(a+(1-a)/2,0,1)) f3=f3+1 # aa=1+t(lam)%*%t(z) # glam=rowSums(t(z)/matrix(aa,p,n,byrow = TRUE)) # print(max(abs(glam))) # cat(el,mel,&#39;\\n&#39;) } # cat(&#39;n =&#39;,n,&#39;p =&#39;,p,&#39;EL =&#39;,f1/nsim,&#39;MEL1 =&#39;,f2/nsim,&#39;MEL2 =&#39;,f3/nsim,&#39;\\n&#39;) cat(n,p,f1/nsim,f2/nsim,f3/nsim,&#39;\\n&#39;) } 2.3.2 绘制分位数图 #=============================================== # figure Q-Q #=============================================== # source(&#39;GlambdaChen.R&#39;) #===================修改参数==================== nsim = 100 # 模拟次数 n = 800 # 样本个数 size = c(42,55,72) # p m = 100 # 分位数个数 as = (1:m-0.5)/m #===================收集数据==================== j = 0 C = matrix(NA,nsim,length(size)) colnames(C)=c(&#39;c1&#39;,&#39;c2&#39;,&#39;c3&#39;) for(p in size){ j = j + 1 f = 0 for(i in 1:nsim){ # 估计方程赋值 Z = matrix(rnorm(n*(p+1),0,1), p+1, n) Z1 = Z[-(p+1),] Z2 = Z[-1,] X = Z1 + 0.5*Z2 z = t(X) # 计算EL值 lam = lambdaChen(z) el = 2*sum( log(1+t(lam)%*%t(z)) ) mel = (el - p) / sqrt(2*p) if( abs(mel) &lt;= qnorm(0.975)) f = f + 1 C[i,j] = mel } cat(&#39;n =&#39;,n,&#39;p =&#39;,p,&#39;覆盖率&#39;,f/nsim,&#39;\\n&#39;) } write.csv(C, file = paste0(&#39;EL&#39;,n,p,&#39;.csv&#39;), row.names = FALSE) # 保存数据 qas &lt;- qnorm(as) # 正态分布的分位数点 c1 = sort(C[,1])[ceiling(as*nsim)] # mel的分位数点 c2 = sort(C[,2])[ceiling(as*nsim)] c3 = sort(C[,3])[ceiling(as*nsim)] #===================绘制QQ图==================== x = seq(-3,3,0.01) plot(x,x, xlim = c(-3,3), ylim = c(-3,3), xaxs = &#39;i&#39;, yaxs = &#39;i&#39;, yaxt = &#39;n&#39;, ann = F, type = &#39;l&#39;) axis(2, las = 1) title(main = paste0(&#39;Normal n = &#39;,n), xlab= &#39;Normal quantile&#39;, ylab = &#39;EL quantile&#39;, line = 2) lines(qas,c1,type=&#39;l&#39;,lty=1,lwd=1.5,col=&#39;blue1&#39;) lines(qas,c2,type=&#39;l&#39;,lty=3,lwd=1.5,col=&#39;aquamarine4&#39;) lines(qas,c3,type=&#39;l&#39;,lty=5,lwd=1.5,col=&#39;brown2&#39;) "],["section-1.html", "第 3 章 2022-09-30 3.1 线性模型 3.2 模拟结果 3.3 运行代码", " 第 3 章 2022-09-30 3.1 线性模型 根据2007ShiJian，做一个高维线性模型的模拟，其中\\(X_{ij}\\)的取值参考2020ChangJY。 2007ShiJian.pdf 2020ChangJY.pdf 3.2 模拟结果 \\[Y = X^\\mathsf{T}\\beta + \\epsilon\\] \\(n\\)表示样本个数 \\(n = 200,400,800\\) \\(p\\)表示样本维数 \\(p=cn^{index}\\) \\(index=0.16,0.24,0.4\\) \\(c = 3,4,5\\) \\(X_i \\sim N(0,\\Sigma_{p}), \\Sigma_{p}=(\\sigma_{ij})_{p \\times p}\\) \\(\\sigma_{ij}=I(i=j)+0.5I(i \\neq j)\\) \\(I(x \\in \\omega)= \\left\\{ \\begin{aligned} \\nonumber 1,&amp; x \\in \\omega,\\\\ 0,&amp;x \\notin \\omega.\\\\ \\end{aligned} \\right.\\) 3.2.1 覆盖率 n = 200 n = 400 n = 800 p EL MEL p EL MEL p EL MEL 0.16 7 0.916 0.924 8 0.934 0.942 9 0.928 0.934 0.16 9 0.894 0.910 10 0.918 0.922 12 0.956 0.956 0.16 12 0.870 0.882 13 0.926 0.938 15 0.928 0.934 0.24 11 0.862 0.872 13 0.894 0.910 15 0.932 0.942 0.24 14 0.822 0.846 17 0.890 0.904 20 0.944 0.950 0.24 18 0.786 0.800 21 0.848 0.866 25 0.900 0.910 0.4 25 0.620 0.654 33 0.716 0.752 43 0.878 0.888 0.4 33 0.428 0.488 44 0.526 0.582 58 0.684 0.736 0.4 42 0.188 0.218 55 0.412 0.474 72 0.546 0.624 3.2.2 分位数图 3.2.3 MEL 正态 3.2.4 EL 卡方 3.3 运行代码 #=============================================== # High-dim linear model #=============================================== rm(list = ls()) library(&#39;MASS&#39;) source(&#39;GlambdaChen.R&#39;) # ==================修改参数==================== nsim = 500 n = 400 index = 0.2 c = c(3,4,5) ps = round(c*n^index) # ==================开始模拟==================== EL = matrix(NA,nsim,length(ps)) colnames(EL)=c(paste0(&#39;p=&#39;,ps[1]),ps[2],ps[3]) MEL = matrix(NA,nsim,length(ps)) colnames(MEL)=c(ps[1],ps[2],ps[3]) cat(&#39;nsim =&#39;,nsim,&#39;\\n&#39;) j = 0 for(p in ps){ j = j + 1 f1 = 0 mu = rep(0,p) Sigma = diag(p) for(k in 1:p){ for(l in 1:p){ if(k != l){Sigma[k,l] = 0.5} } } for(i in 1:nsim){ # 估计方程赋值 X = mvrnorm(n,mu,Sigma) e = rnorm(n) # Y = X%*%theta + e z = X*e # 计算MEL值 lam = lambdaChen(z) el = 2*sum(log(1+t(lam)%*%t(z))) mel = (el-p)/sqrt(2*p) if(abs(mel)&lt;=qnorm(0.975)) f1 = f1 + 1 # 检验lam # aa=1+t(lam)%*%t(z) # glam=rowSums(t(z)/matrix(aa,p,n,byrow = TRUE)) # cat(m,max(abs(glam)),&#39;\\n&#39;) EL[i,j] = el MEL[i,j] = mel } cat(&#39;n =&#39;,n,&#39;p =&#39;,p,&#39;覆盖率&#39;,f1/nsim,&#39;\\n&#39;) } write.csv( EL, file = paste0(&#39;EL&#39; ,n,index,&#39;.csv&#39;), row.names = FALSE) # 保存数据 write.csv(MEL, file = paste0(&#39;MEL&#39;,n,index,&#39;.csv&#39;), row.names = FALSE) # 保存数据 # ===================绘制QQ图==================== m = 50 # 分位数个数 as = (1:m-0.5)/m # 名义水平 par(mfrow = c(1, 2)) # 绘制正态QQ图 qas &lt;- qnorm(as) # 正态分布的分位数点 c1 = sort(MEL[,1])[ceiling(as*nsim)] # mel的分位数点 c2 = sort(MEL[,2])[ceiling(as*nsim)] c3 = sort(MEL[,3])[ceiling(as*nsim)] plot(qas,qas,xaxs = &#39;i&#39;, yaxs = &#39;i&#39;, yaxt = &#39;n&#39;, ann = F, type = &#39;l&#39;) axis(2, las = 1) title(main = paste0(&#39;Norm n = &#39;,n,&#39; index = &#39;,index), xlab = &#39;Normal quantile&#39;, ylab = &#39;MEL quantile&#39;) lines(qas,c1,type=&#39;l&#39;,lty=1,lwd=1.5,col=&#39;blue1&#39;) lines(qas,c2,type=&#39;l&#39;,lty=3,lwd=1.5,col=&#39;aquamarine4&#39;) lines(qas,c3,type=&#39;l&#39;,lty=5,lwd=1.5,col=&#39;brown2&#39;) points(qnorm(0.95),qnorm(0.95),pch=5) # 绘制卡方QQ图 x &lt;- seq(0,120,5) # 卡方的分位数点 c1 = sort(EL[,1])[ceiling(as*nsim)] # mel的分位数点 c2 = sort(EL[,2])[ceiling(as*nsim)] c3 = sort(EL[,3])[ceiling(as*nsim)] plot(x,x,xaxs = &#39;i&#39;, yaxs = &#39;i&#39;, xlim =c(min(qchisq(as,ps[1])), max(qchisq(as,ps[3]))), ylim =c(min(qchisq(as,ps[1])), max(qchisq(as,ps[3]))), yaxt = &#39;n&#39;, ann = F, type = &#39;l&#39;) axis(2, las = 1) title(main = paste0(&#39;ChiS n = &#39;,n,&#39; index = &#39;,index), xlab = &#39;ChiSquare quantile&#39;, ylab = &#39;EL quantile&#39;) lines(qchisq(as,ps[1]),c1,type=&#39;l&#39;,lty=1,lwd=1.5,col=&#39;blue1&#39;) lines(qchisq(as,ps[2]),c2,type=&#39;l&#39;,lty=3,lwd=1.5,col=&#39;aquamarine4&#39;) lines(qchisq(as,ps[3]),c3,type=&#39;l&#39;,lty=5,lwd=1.5,col=&#39;brown2&#39;) points(qchisq(0.95,ps[1]),qchisq(0.95,ps[1]),pch=5,col=&#39;blue1&#39;) points(qchisq(0.95,ps[2]),qchisq(0.95,ps[2]),pch=5,col=&#39;aquamarine4&#39;) points(qchisq(0.95,ps[3]),qchisq(0.95,ps[3]),pch=5,col=&#39;brown2&#39;) "],["section-2.html", "第 4 章 2022-10-01 4.1 空间模型 4.2 模拟结果 4.3 运行代码", " 第 4 章 2022-10-01 4.1 空间模型 高维EL推广至2021QinYS。 2021QinYS.pdf 代码下载 4.2 模拟结果 4.2.1 覆盖率 100 100 100 400 400 400 900 900 900 0 3 0.890 0.892 3 0.931 0.935 3 0.954 0.955 0 4 0.858 0.864 4 0.932 0.937 4 0.941 0.947 0 5 0.821 0.829 5 0.922 0.932 5 0.938 0.943 0.14 6 0.769 0.782 7 0.934 0.946 8 0.940 0.946 0.14 8 0.721 0.738 9 0.911 0.919 10 0.923 0.931 0.14 10 0.662 0.676 12 0.903 0.911 13 0.918 0.927 0.16 6 0.800 0.806 8 0.915 0.927 9 0.931 0.935 0.16 8 0.747 0.754 10 0.897 0.911 12 0.919 0.931 0.16 10 0.653 0.668 13 0.892 0.909 15 0.921 0.932 0.24 9 0.697 0.722 13 0.896 0.916 15 0.934 0.940 0.24 12 0.549 0.572 17 0.843 0.862 20 0.924 0.940 0.24 15 0.433 0.459 21 0.833 0.846 26 0.904 0.910 0.4 19 0.280 0.301 33 0.651 0.690 46 0.791 0.822 0.4 25 0.086 0.098 44 0.440 0.484 61 0.703 0.751 0.4 32 0.008 0.010 55 0.275 0.312 76 0.518 0.578 4.2.2 分位数图 4.2.3 MEL 正态 4.2.4 EL 卡方 4.3 运行代码 #=============================================== # High-dim SARAR N(0,1) #=============================================== rm(list = ls()) source(&#39;GlambdaChen.R&#39;) library(&#39;MASS&#39;) library(&#39;sp&#39;) library(&#39;sf&#39;) library(&#39;spData&#39;) library(&#39;terra&#39;) library(&#39;spdep&#39;) f&lt;-function(Matrix,Vector){ irow = nrow(Matrix) v =c(0) for(i in 2:irow){ v[i] =Matrix[i,][1:(i-1)]%*%Vector[1:i-1] } return(v) } HighDim_SARAR &lt;- function(m,index){ # ==================修改参数==================== # m = 20 # index = 0.14 c = c(3,4,5) nsim = 1000 rou1 = 0.85 rou2 = 0.15 n = m*m ps = round(c*n^index) # ==================数据准备==================== Wnb = cell2nb(m,m,type=&#39;queen&#39;) Ws = nb2listw(Wnb) Wn = listw2mat(Ws) Mn = Wn In = diag(n) An = In - rou1*Wn Bn = In - rou2*Mn Ani = solve(An) Bni = solve(Bn) # 估计方程准备 Gn = Bn%*%Wn%*%Ani%*%Bni Gnn = 1/2*(Gn + t(Gn)) Hn = Mn%*%Bni Hnn = 1/2*(Hn + t(Hn)) g = diag(Gnn) h = diag(Hnn) # ==================开始模拟==================== EL = matrix(NA,nsim,length(ps)) colnames(EL)=c(paste0(&#39;p=&#39;,ps[1]+3),paste0(&#39;p=&#39;,ps[2]+3),paste0(&#39;p=&#39;,ps[3]+3)) MEL = matrix(NA,nsim,length(ps)) colnames(MEL)=c(paste0(&#39;p=&#39;,ps[1]+3),paste0(&#39;p=&#39;,ps[2]+3),paste0(&#39;p=&#39;,ps[3]+3)) cat(&#39;nsim =&#39;,nsim,&#39;c =&#39;,c,&#39;index =&#39;,index,&#39;\\n&#39;) cat(&#39;n &#39;,&#39;p &#39;,&#39;EL &#39;,&#39; MEL &#39;,&#39;\\n&#39;) j = 0 for(p in ps){ j = j + 1 mu = rep(0,p) Sigma = diag(p) # for(k in 1:p){ # for(l in 1:p){ # if(k != l){Sigma[k,l] = 0.5} # } # } beta = matrix(rep(1,p),p,1) f1 = 0 f2 = 0 for(i in 1:nsim){ Xn = mvrnorm(n,mu,Sigma) En = rnorm(n,0,1);sigma2 = 1 e = En b = t(Xn)%*%t(Bn) s = Bn%*%Wn%*%Ani%*%Xn%*%beta # 模拟Yi(程序运行不需要Yi值) # Yn = Ani%*%Xn%*%beta + Ani%*%Bni%*%En # 估计方程赋值 z = matrix(NA,nrow=n,ncol=p+3) z[,1:p] = b*e z[,p+1] = g*(e^2-sigma2) + 2*e*f(Gnn,e) + s*e z[,p+2] = h*(e^2-sigma2) + 2*e*f(Hnn,e) z[,p+3] = e*e - rep(sigma2, n) # 计算EL值 lam = lambdaChen(z) el = 2*sum( log(1+t(lam)%*%t(z) ) ) mel = (el-p-3)/sqrt(2*(p+3)) if( el&lt;=qchisq(0.95,p+3)) f1=f1+1 if(abs(mel)&lt;=qnorm(0.975)) f2=f2+1 EL[i,j] = el MEL[i,j] = mel } cat(n,p,f1/nsim,f2/nsim,&#39;\\n&#39;) } write.csv( EL, file = paste0(&#39;EL&#39; ,n,index,&#39;.csv&#39;), row.names = FALSE) # 保存数据 write.csv(MEL, file = paste0(&#39;MEL&#39;,n,index,&#39;.csv&#39;), row.names = FALSE) # 保存数据 # ===================绘制QQ图==================== m = 50 # 分位数个数 as = (1:m-0.5)/m # 名义水平 par(mfrow = c(1, 2)) # 绘制正态分位数图 qas &lt;- qnorm(as) # 正态分布的分位数点 c1 = sort(MEL[,1])[ceiling(as*nsim)] # mel的分位数点 c2 = sort(MEL[,2])[ceiling(as*nsim)] c3 = sort(MEL[,3])[ceiling(as*nsim)] plot(qas,qas,xaxs = &#39;i&#39;, yaxs = &#39;i&#39;, yaxt = &#39;n&#39;, ann = F, type = &#39;l&#39;) axis(2, las = 1) title(main = paste0(&#39;Norm n = &#39;,n,&#39; index = &#39;,index), xlab = &#39;Normal quantile&#39;, ylab = &#39;MEL quantile&#39;) lines(qas,c1,type=&#39;l&#39;,lty=1,lwd=1.5,col=&#39;blue1&#39;) lines(qas,c2,type=&#39;l&#39;,lty=3,lwd=1.5,col=&#39;aquamarine4&#39;) lines(qas,c3,type=&#39;l&#39;,lty=5,lwd=1.5,col=&#39;brown2&#39;) points(qnorm(0.95),qnorm(0.95),pch=5) # 绘制卡方分位数图 x &lt;- seq(0,120,5) # 卡方的分位数点 c1 = sort(EL[,1])[ceiling(as*nsim)] # mel的分位数点 c2 = sort(EL[,2])[ceiling(as*nsim)] c3 = sort(EL[,3])[ceiling(as*nsim)] plot(x,x,xaxs = &#39;i&#39;, yaxs = &#39;i&#39;, xlim =c(min(qchisq(as,ps[1]+3)), max(qchisq(as,ps[3]+3))), ylim =c(min(qchisq(as,ps[1]+3)), max(qchisq(as,ps[3]+3))), yaxt = &#39;n&#39;, ann = F, type = &#39;l&#39;) axis(2, las = 1) title(main = paste0(&#39;ChiS n = &#39;,n,&#39; index = &#39;,index), xlab = &#39;ChiSquare quantile&#39;, ylab = &#39;EL quantile&#39;) lines(qchisq(as,ps[1]+3),c1,type=&#39;l&#39;,lty=1,lwd=1.5,col=&#39;blue1&#39;) lines(qchisq(as,ps[2]+3),c2,type=&#39;l&#39;,lty=3,lwd=1.5,col=&#39;aquamarine4&#39;) lines(qchisq(as,ps[3]+3),c3,type=&#39;l&#39;,lty=5,lwd=1.5,col=&#39;brown2&#39;) points(qchisq(0.95,ps[1]+3),qchisq(0.95,ps[1]+3),pch=5,col=&#39;blue1&#39;) points(qchisq(0.95,ps[2]+3),qchisq(0.95,ps[2]+3),pch=5,col=&#39;aquamarine4&#39;) points(qchisq(0.95,ps[3]+3),qchisq(0.95,ps[3]+3),pch=5,col=&#39;brown2&#39;) } # ==================调用函数==================== for(m in c(10,15,20,30)){ for(index in c(0,0.14,0.16,0.24,0.4)){ HighDim_SARAR(m,index) } } "],["section-3.html", "第 5 章 2022-10-05 5.1 覆盖率 5.2 分位数图", " 第 5 章 2022-10-05 探究高维SARAR在不同误差分布下的表现。 5.1 覆盖率 5.1.1 \\(N(0,1)\\)误差 100 100 100 400 400 400 900 900 900 0 3 0.890 0.892 3 0.931 0.935 3 0.954 0.955 0 4 0.858 0.864 4 0.932 0.937 4 0.941 0.947 0 5 0.821 0.829 5 0.922 0.932 5 0.938 0.943 0.14 6 0.769 0.782 7 0.934 0.946 8 0.940 0.946 0.14 8 0.721 0.738 9 0.911 0.919 10 0.923 0.931 0.14 10 0.662 0.676 12 0.903 0.911 13 0.918 0.927 0.16 6 0.800 0.806 8 0.915 0.927 9 0.931 0.935 0.16 8 0.747 0.754 10 0.897 0.911 12 0.919 0.931 0.16 10 0.653 0.668 13 0.892 0.909 15 0.921 0.932 0.24 9 0.697 0.722 13 0.896 0.916 15 0.934 0.940 0.24 12 0.549 0.572 17 0.843 0.862 20 0.924 0.940 0.24 15 0.433 0.459 21 0.833 0.846 26 0.904 0.910 0.4 19 0.280 0.301 33 0.651 0.690 46 0.791 0.822 0.4 25 0.086 0.098 44 0.440 0.484 61 0.703 0.751 0.4 32 0.008 0.010 55 0.275 0.312 76 0.518 0.578 5.1.2 \\(N(0,0.75)\\)误差 100 100 100 400 400 400 900 900 900 0 3 0.867 0.870 3 0.928 0.931 3 0.947 0.953 0 4 0.834 0.847 4 0.936 0.943 4 0.940 0.942 0 5 0.815 0.827 5 0.931 0.940 5 0.941 0.943 0.14 6 0.792 0.806 7 0.910 0.918 8 0.954 0.964 0.14 8 0.728 0.744 9 0.915 0.922 10 0.933 0.943 0.14 10 0.685 0.694 12 0.898 0.913 13 0.929 0.936 0.24 9 0.716 0.745 13 0.884 0.888 15 0.928 0.943 0.24 12 0.561 0.592 17 0.878 0.889 20 0.913 0.924 0.24 15 0.423 0.448 21 0.828 0.849 26 0.894 0.902 0.4 19 0.245 0.267 33 0.642 0.692 46 0.782 0.811 0.4 25 0.091 0.100 44 0.471 0.513 61 0.662 0.712 0.4 32 0.009 0.012 55 0.243 0.277 76 0.506 0.562 5.1.3 \\(t(5)\\)误差 100 100 100 225 225 225 900 900 900 0.14 6 0.681 0.695 6 0.820 0.833 8 0.912 0.920 0.14 8 0.585 0.605 9 0.755 0.772 10 0.889 0.906 0.14 10 0.500 0.515 11 0.746 0.768 13 0.897 0.908 0.24 9 0.555 0.570 11 0.734 0.754 15 0.888 0.904 0.24 12 0.405 0.423 15 0.640 0.664 20 0.843 0.864 0.24 15 0.267 0.285 18 0.545 0.579 26 0.827 0.850 0.4 19 0.152 0.165 26 0.292 0.334 46 0.617 0.668 0.4 25 0.040 0.044 35 0.133 0.149 61 0.427 0.478 0.4 32 0.003 0.004 44 0.029 0.039 76 0.239 0.284 5.1.4 \\(\\chi^2(4)\\)误差 100 100 100 225 225 225 400 400 400 0.14 6 0.699 0.709 6 0.823 0.835 7 0.874 0.882 0.14 8 0.596 0.609 9 0.772 0.788 9 0.843 0.855 0.14 10 0.500 0.528 11 0.764 0.779 12 0.828 0.849 0.24 9 0.588 0.602 11 0.750 0.774 13 0.820 0.844 0.24 12 0.445 0.463 15 0.665 0.695 17 0.781 0.801 0.24 15 0.316 0.331 18 0.586 0.626 21 0.696 0.729 0.4 19 0.180 0.198 26 0.371 0.407 33 0.487 0.538 0.4 25 0.052 0.061 35 0.182 0.204 44 0.285 0.326 0.4 32 0.008 0.011 44 0.054 0.068 55 0.137 0.166 5.2 分位数图 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
